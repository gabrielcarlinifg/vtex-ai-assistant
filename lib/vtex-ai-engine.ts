import OpenAI from 'openai'

// Configura√ß√£o OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Base de conhecimento local (resposta r√°pida)
export const vtexKnowledgeBase = {
  'produto-nao-aparece': {
    keywords: ['produto', 'n√£o aparece', 'sumiu', 'invis√≠vel', 'n√£o mostra', 'n√£o est√°', 'n√£o encontro'],
    category: 'Cat√°logo',
    priority: 'Alta',
    quickResponse: `üîç **Produto n√£o aparece no site**

**Verifica√ß√µes imediatas:**
1. Admin VTEX ‚Üí Cat√°logo ‚Üí Produtos e SKUs
2. Verificar se produto est√° "Ativo"
3. Estoque & Entrega ‚Üí Gerenciar Invent√°rio (qty > 0)
4. Pre√ßos ‚Üí Lista de Pre√ßos (pre√ßo ativo)
5. For√ßar reindexa√ß√£o se necess√°rio

**APIs para diagn√≥stico:**
\`GET /api/catalog/pvt/product/{id}\`
\`GET /api/logistics/pvt/inventory/skus/{skuId}\`
\`GET /api/pricing/prices/{skuId}\`

**Tempo estimado:** 15-30 minutos`,
    documentationLinks: [
      'https://help.vtex.com/pt/faq/por-que-o-produto-nao-aparece-no-site',
      'https://developers.vtex.com/docs/guides/catalog-api-overview'
    ]
  },

  'erro-401': {
    keywords: ['401', 'unauthorized', 'n√£o autorizado', 'autentica√ß√£o', 'forbidden', '403'],
    category: 'APIs & Autentica√ß√£o',
    priority: 'Alta',
    quickResponse: `üîê **Erro 401/403 - Problemas de Autentica√ß√£o**

**Verifica√ß√µes imediatas:**
1. Headers corretos:
   \`X-VTEX-API-AppKey: {seu-app-key}\`
   \`X-VTEX-API-AppToken: {seu-app-token}\`

2. Teste b√°sico:
   \`GET /api/license-manager/pvt/accounts\`

3. Verificar permiss√µes:
   Admin ‚Üí Configura√ß√µes ‚Üí Perfis de acesso

4. Recriar credenciais:
   Configura√ß√µes ‚Üí Gerenciamento de usu√°rios

**Tempo estimado:** 10-20 minutos`,
    documentationLinks: [
      'https://developers.vtex.com/docs/guides/api-authentication-using-application-keys'
    ]
  },

  'checkout-problemas': {
    keywords: ['checkout', 'pagamento', 'finalizar', 'compra', 'carrinho', 'payment'],
    category: 'Checkout & Pagamentos',
    priority: 'Cr√≠tica',
    quickResponse: `üí≥ **Problemas no Checkout - PRIORIDADE CR√çTICA**

**Verifica√ß√µes urgentes:**
1. Admin ‚Üí Pedidos ‚Üí Transa√ß√µes
2. Localizar transa√ß√£o com erro
3. Analisar logs detalhados
4. Configura√ß√µes ‚Üí Pagamentos
5. Testar meios de pagamento
6. Simular compra completa

**APIs para an√°lise:**
\`GET /api/checkout/pub/orders/{orderId}\`
\`GET /api/payments/pvt/transactions/{transactionId}\`

**Resolver IMEDIATAMENTE - impacta vendas!**`,
    documentationLinks: [
      'https://help.vtex.com/pt/tutorial/verificar-erros-ou-problemas-em-uma-transacao',
      'https://developers.vtex.com/docs/guides/checkout-api-overview'
    ]
  },

  'estoque-problemas': {
    keywords: ['estoque', 'inventory', 'disponibilidade', 'quantidade', 'warehouse'],
    category: 'Estoque & Log√≠stica',
    priority: 'M√©dia',
    quickResponse: `üì¶ **Problemas de Estoque**

**Checklist r√°pido:**
1. Estoque & Entrega ‚Üí Gerenciar Invent√°rio
2. Buscar SKU espec√≠fico
3. Verificar quantidade dispon√≠vel
4. Status do warehouse (ativo/inativo)
5. Analisar movimenta√ß√µes recentes
6. Verificar reservas em andamento

**Tempo estimado:** 10-15 minutos`,
    documentationLinks: [
      'https://help.vtex.com/pt/tutorial/gerenciar-inventario'
    ]
  }
}

// Sistema h√≠brido de respostas
export class VTEXAIEngine {
  
  // Busca r√°pida na base local
  findQuickMatch(query: string): any | null {
    const lowerQuery = query.toLowerCase()
    
    for (const [key, knowledge] of Object.entries(vtexKnowledgeBase)) {
      for (const keyword of knowledge.keywords) {
        if (lowerQuery.includes(keyword.toLowerCase())) {
          return {
            type: 'quick',
            confidence: this.calculateConfidence(lowerQuery, knowledge.keywords),
            knowledge,
            source: 'base_local'
          }
        }
      }
    }
    
    return null
  }

  // Calcular confian√ßa da resposta
  calculateConfidence(query: string, keywords: string[]): number {
    const queryWords = query.toLowerCase().split(' ')
    const matchedKeywords = keywords.filter(keyword =>
      queryWords.some(word => word.includes(keyword.toLowerCase()) || keyword.toLowerCase().includes(word))
    )
    
    return Math.min(matchedKeywords.length / keywords.length + 0.2, 1.0)
  }

  // Resposta h√≠brida: base local + IA
  async getHybridResponse(query: string, userContext?: any) {
    // 1. Primeiro tenta resposta r√°pida (base local)
    const quickMatch = this.findQuickMatch(query)
    
    if (quickMatch && quickMatch.confidence > 0.7) {
      // Enriquecer resposta local com IA se necess√°rio
      const enhancedResponse = await this.enhanceWithAI(query, quickMatch.knowledge)
      
      return {
        response: enhancedResponse,
        source: 'hybrid',
        confidence: quickMatch.confidence,
        category: quickMatch.knowledge.category,
        priority: quickMatch.knowledge.priority,
        documentation: quickMatch.knowledge.documentationLinks,
        processingTime: 'Resposta r√°pida (< 1s)'
      }
    }
    
    // 2. Se n√£o encontrou match local, usar IA completa
    return await this.getAIResponse(query, userContext)
  }

  // Enriquecer resposta local com IA
  async enhanceWithAI(query: string, baseKnowledge: any): Promise<string> {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini", // Mais barato e r√°pido
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um especialista em VTEX. Use a base de conhecimento fornecida como funda√ß√£o e enrique√ßa com detalhes espec√≠ficos para a pergunta do usu√°rio.

Base de conhecimento:
${baseKnowledge.quickResponse}

Instru√ß√µes:
- Mantenha a estrutura da resposta base
- Adicione detalhes espec√≠ficos para a situa√ß√£o
- Seja pr√°tico e objetivo
- Use emojis e formata√ß√£o markdown
- Inclua tempo estimado de resolu√ß√£o
- M√°ximo 300 palavras`
          },
          {
            role: "user", 
            content: query
          }
        ],
        max_tokens: 400,
        temperature: 0.3,
      })

      return completion.choices[0]?.message?.content || baseKnowledge.quickResponse
    } catch (error) {
      console.error('Erro ao enriquecer com IA:', error)
      // Fallback para resposta base
      return baseKnowledge.quickResponse
    }
  }

  // Resposta completa da IA (para casos complexos)
  async getAIResponse(query: string, userContext?: any) {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um assistente especializado em VTEX com acesso completo √† documenta√ß√£o oficial.

Contexto: Ag√™ncia FG - empresa de implementa√ß√£o VTEX prestando suporte t√©cnico e evolu√ß√£o.

Base de conhecimento principal:
- developers.vtex.com (APIs, integra√ß√µes, desenvolvimento)
- help.vtex.com/pt (tutoriais, troubleshooting, configura√ß√µes)
- Experi√™ncia pr√°tica com problemas comuns

Estilo de resposta:
- Estruturado com t√≠tulos e subt√≠tulos
- Checklists pr√°ticos quando aplic√°vel
- APIs relevantes com exemplos
- Tempo estimado de resolu√ß√£o
- Links para documenta√ß√£o oficial
- Emojis para melhor legibilidade
- M√°ximo 500 palavras

Categorias principais:
üõçÔ∏è Produtos e Cat√°logo
üì¶ Estoque e Log√≠stica  
üí≥ Checkout e Pagamentos
üîß APIs e Integra√ß√µes
üé® Storefront e Frontend
‚öôÔ∏è Configura√ß√µes Gerais

Se n√£o souber algo espec√≠fico, seja honesto e direcione para documenta√ß√£o oficial.`
          },
          {
            role: "user",
            content: query
          }
        ],
        max_tokens: 600,
        temperature: 0.3,
      })

      const aiResponse = completion.choices[0]?.message?.content

      return {
        response: aiResponse || "Desculpe, n√£o consegui processar sua consulta no momento.",
        source: 'openai',
        confidence: 0.8,
        category: 'Geral',
        priority: 'M√©dia',
        documentation: ['https://developers.vtex.com', 'https://help.vtex.com/pt'],
        processingTime: 'Resposta IA (2-5s)'
      }
    } catch (error) {
      console.error('Erro na API OpenAI:', error)
      
      return {
        response: `‚ùå **Erro tempor√°rio na IA**
        
N√£o foi poss√≠vel acessar a intelig√™ncia artificial no momento. 

**Enquanto isso, voc√™ pode:**
- Consultar diretamente: [developers.vtex.com](https://developers.vtex.com)
- Buscar tutoriais: [help.vtex.com/pt](https://help.vtex.com/pt)  
- Entrar em contato com suporte VTEX
- Tentar novamente em alguns minutos

**Erro:** ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        source: 'error',
        confidence: 0,
        category: 'Sistema',
        priority: 'Baixa',
        documentation: ['https://developers.vtex.com', 'https://help.vtex.com/pt'],
        processingTime: 'Erro na requisi√ß√£o'
      }
    }
  }

  // Analytics simples
  logQuery(query: string, response: any, userInfo?: any) {
    console.log('VTEX AI Query:', {
      timestamp: new Date().toISOString(),
      query: query.substring(0, 100),
      source: response.source,
      confidence: response.confidence,
      category: response.category,
      user: userInfo?.email || 'anonymous'
    })
  }
}